CREATE TABLE MAIN.ADDRESS(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  ADDRESS_LINE1 VARCHAR(100) NOT NULL,
  ADDRESS_LINE2 VARCHAR(100),
  CITY VARCHAR(50) NOT NULL,
  STATE VARCHAR(2) NOT NULL,
  ZIP VARCHAR(5) NOT NULL
);
-- QUESTION: How could we track national and state taxes?
-- QUESTION: Can we make the Tax Area dependent on the address or should that be handled in Store?
CREATE TABLE MAIN.TAX_AREA(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  ZIP_CODE VARCHAR(5) NOT NULL, -- TODO: REGEX or Constraint
  TAX_RATE FLOAT NOT NULL
);
CREATE TABLE MAIN.PRODUCT(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  DESCRIPTION VARCHAR(1000) NOT NULL,
  CURRENT_ITEM_PRICE NUMERIC(1000,2) NOT NULL
);

CREATE TABLE MAIN.PERSON(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  /* https://stackoverflow.com/questions/20958/list-of-standard-lengths-for-database-fields */
  NAME VARCHAR(100) NOT NULL,
  PHONE VARCHAR(13) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL,
  ADDRESS_ID UUID NOT NULL REFERENCES MAIN.ADDRESS(ID),
  /*https://stackoverflow.com/questions/5689718/how-can-i-create-a-constraint-to-check-if-an-email-is-valid-in-postgres/5691535#5691535*/
  CONSTRAINT EMAIL_CHECK CHECK (EMAIL ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$')
);
CREATE TABLE MAIN.STORE(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  /* https://stackoverflow.com/questions/20958/list-of-standard-lengths-for-database-fields */
  STORE_NUMBER INTEGER,
  NAME VARCHAR(100) NOT NULL,
  PHONE VARCHAR(13) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL,
  TAX_AREA_ID UUID REFERENCES MAIN.TAX_AREA(ID),
  MANAGER_ID UUID NOT NULL REFERENCES MAIN.PERSON(ID),
  ADDRESS_ID UUID REFERENCES MAIN.ADDRESS(ID),
  /*https://stackoverflow.com/questions/5689718/how-can-i-create-a-constraint-to-check-if-an-email-is-valid-in-postgres/5691535#5691535*/
  CONSTRAINT EMAIL_CHECK CHECK (EMAIL ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$')
);
CREATE TABLE MAIN.EMPLOYEE(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  PAYRATE FLOAT,
  IS_ACTIVE BOOLEAN NOT NULL DEFAULT FALSE,
  STORE_ID UUID REFERENCES MAIN.STORE(ID) NOT NULL,
  PERSON_ID UUID REFERENCES MAIN.PERSON(ID) NOT NULL 
);
CREATE TABLE MAIN.CUSTOMER(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  STORE_ID UUID REFERENCES MAIN.STORE(ID) NOT NULL,
  PERSON_ID UUID REFERENCES MAIN.PERSON(ID) NOT NULL
);
-- TODO: Could this be a view?
CREATE TABLE MAIN.TRANSACTION(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  QUANITITY_PURCHASED INTEGER NOT NULL,
  CUSTOMER_ID UUID NOT NULL REFERENCES MAIN.CUSTOMER(ID),
  STATED_TOTAL FLOAT NOT NULL
);
CREATE TABLE MAIN.TRANSACTION_PRODUCT(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  TRANSACTION_ID UUID NOT NULL REFERENCES MAIN.TRANSACTION(ID),
  PRODUCT_ID UUID NOT NULL REFERENCES MAIN.PRODUCT(ID),
  QUANTITY INTEGER NOT NULL DEFAULT 0,
  PER_ITEM_PRICE NUMERIC(1000,2) NOT NULL
);
CREATE TABLE MAIN.CUSTOMER_FAVORITES(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  CUSTOMER_ID UUID NOT NULL REFERENCES MAIN.CUSTOMER(ID),
  PRODUCT_ID UUID NOT NULL REFERENCES MAIN.PRODUCT(ID)
);
/* TODO: What if we move Customer up here? */
CREATE TABLE MAIN.REWARDS_ACCOUNT(	
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  /* Why should it be a decimal*/
  PERSON_ID UUID NOT NULL REFERENCES MAIN.PERSON(ID),
  REWARD_BALANCE NUMERIC(1000,2) NOT NULL
);
CREATE TABLE MAIN.PRODUCT_REWARD(
  ID UUID PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
  PRODUCT_ID UUID REFERENCES MAIN.PRODUCT(ID),
  TRANSACTION_PRODUCT_ID UUID REFERENCES MAIN.TRANSACTION_PRODUCT(ID),
  REWARD_FACTOR NUMERIC(5,2) NOT NULL DEFAULT 1
);